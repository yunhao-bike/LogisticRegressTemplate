import numpy as np
import statsmodels.api as sm
from sklearn.linear_model import LogisticRegression
import pandas as pd
import matplotlib.pyplot as plt
from sklearn import metrics
from sklearn.model_selection import train_test_split

#1 Read Data
df=pd.read_csv('multi_logit.csv',header=None) # Dataset which can be found in this folder
df.columns = ["y", "x1", "x2"] 
features = ["x1", "x2"]
labels = ["y"]

#2 Split dataset into train set and test set
#建立训练数据和测试数据
X_train , X_test , y_train , y_test = train_test_split(df[features],df[labels],train_size=0.8)
#输出数据大小
print('原始数据特征：',df[features].shape,'训练数据特征：',X_train.shape,'，测试数据特征：',X_test.shape)
print('原始数据标签：',df[labels].shape,'训练数据标签：',y_train.shape ,'测试数据标签：',y_test.shape)

#3 # Before fit regression, first Plot scatter graph for train set and test set respectivelly
# Note that you MUST use "np.array" otherwise all the points have the same color
plt.figure(figsize=(16,8))
plt.subplot(2,2,1)
plt.scatter(np.array(X_train.iloc[:, 0]),np.array(X_train.iloc[:, 1]),c=np.array(y_train),edgecolors="k", cmap=plt.cm.Paired,label="train data")
plt.subplot(2,2,2)
plt.scatter(np.array(X_test.iloc[:, 0]),np.array(X_test.iloc[:, 1]),c=np.array(y_test),edgecolors="k",label="test data")


#4 Construct the logistic regression Model
model = LogisticRegression(multi_class='ovr', solver='sag',
            max_iter=1000, random_state=42) # I don't konw the meaning of those parameters, but those can be modified
model.fit(X_train , y_train) # All the parameters are estimated in this step

#5 See the result of model score of train set
print("the model score for train set is {}" .format(model.score(X_train , y_train)))
print("the model score for test set is {}" .format(model.score(X_test , y_test)))

#6 See the graph of prediction of test set (Compare right down corner with the up right corner)
y_pred = model.predict(X_test)
plt.subplot(2,2,4)
plt.scatter(np.array(X_test.iloc[:, 0]),np.array(X_test.iloc[:, 1]),c=np.array(y_pred),edgecolors="k",label="test data")
plt.show()
